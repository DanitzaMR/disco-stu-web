import React, { useState, useEffect } from 'react';
import { AuthContext } from './AuthContextProvider';

/**
 * üîê CONTEXTO DE AUTENTICACI√ìN - FUNCIONALIDAD CLAVE DE REACT
 * 
 * Este componente implementa el patr√≥n Context API de React para gestionar
 * el estado de autenticaci√≥n de forma global en toda la aplicaci√≥n.
 * 
 * FUNCIONALIDADES REACT IMPLEMENTADAS:
 * - useState: Para manejar el estado del usuario y loading
 * - useEffect: Para verificar sesi√≥n persistente al cargar la app
 * - Context API: Para compartir estado entre componentes sin prop drilling
 * - localStorage: Para persistir la sesi√≥n del usuario entre recargas
 */

// Proveedor del contexto de autenticaci√≥n
export const AuthProvider = ({ children }) => {
  // üì¶ ESTADO LOCAL CON useState
  // user: Almacena la informaci√≥n del usuario autenticado (null si no hay sesi√≥n)
  const [user, setUser] = useState(null);
  
  // loading: Controla el estado de carga mientras se verifica la sesi√≥n
  const [loading, setLoading] = useState(true);

  // üîÑ EFECTO DE INICIALIZACI√ìN - useEffect
  // Se ejecuta UNA SOLA VEZ al montar el componente (array de dependencias vac√≠o [])
  // Verifica si hay una sesi√≥n guardada en localStorage y la restaura
  useEffect(() => {
    console.log('üîç Verificando sesi√≥n existente en localStorage...');
    
    // Intentar recuperar sesi√≥n persistente
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        setUser(parsedUser); // Restaurar estado del usuario
        console.log('‚úÖ Sesi√≥n restaurada:', parsedUser.email);
      } catch (error) {
        console.error('‚ùå Error al parsear sesi√≥n guardada:', error);
        localStorage.removeItem('currentUser'); // Limpiar datos corruptos
      }
    } else {
      console.log('‚ÑπÔ∏è No hay sesi√≥n previa guardada');
    }
    
    setLoading(false); // Finalizar estado de carga
  }, []); // Array vac√≠o = solo se ejecuta al montar el componente

  // üìù FUNCI√ìN DE REGISTRO - L√ìGICA DE PERSISTENCIA EN localStorage
  // Maneja el registro de nuevos usuarios y actualiza el estado local
  const register = (userData) => {
    try {
      console.log('üìù Iniciando registro de usuario:', userData.email);
      
      // üóÑÔ∏è OPERACI√ìN CRUD EN localStorage
      // 1. LEER: Obtener usuarios existentes del almacenamiento local
      const existingUsers = JSON.parse(localStorage.getItem('discoStuUsers')) || [];
      console.log('üìö Usuarios existentes:', existingUsers.length);
      
      // 2. VALIDAR: Verificar si el email ya existe (evitar duplicados)
      const userExists = existingUsers.find(u => u.email === userData.email);
      if (userExists) {
        throw new Error('El email ya est√° registrado');
      }

      // 3. CREAR: Nuevo usuario con ID √∫nico basado en timestamp
      const newUser = {
        id: Date.now().toString(), // ID √∫nico basado en timestamp
        name: userData.name,
        email: userData.email,
        password: userData.password, // ‚ö†Ô∏è En producci√≥n esto debe estar hasheado
        createdAt: new Date().toISOString(),
        reservations: [] // Array para futuras reservas del usuario
      };

      // 4. ACTUALIZAR: Agregar usuario al array y guardar en localStorage
      const updatedUsers = [...existingUsers, newUser]; // Spread operator para inmutabilidad
      localStorage.setItem('discoStuUsers', JSON.stringify(updatedUsers));
      console.log('üíæ Usuario guardado en localStorage');

      // 5. CREAR SESI√ìN: Objeto sin password para la sesi√≥n activa
      const userSession = {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        createdAt: newUser.createdAt
        // ‚ùó password NO se incluye en la sesi√≥n por seguridad
      };

      // 6. PERSISTIR SESI√ìN: Guardar sesi√≥n actual en localStorage
      localStorage.setItem('currentUser', JSON.stringify(userSession));
      
      // 7. ACTUALIZAR ESTADO: Cambiar estado local para re-renderizar componentes
      setUser(userSession); // ‚Üê Esto causa re-render en todos los componentes que usan AuthContext
      
      console.log('‚úÖ Registro exitoso y sesi√≥n iniciada');
      return { success: true, user: userSession };
    } catch (error) {
      console.error('‚ùå Error en registro:', error.message);
      return { success: false, error: error.message };
    }
  };

  // üîê FUNCI√ìN DE INICIO DE SESI√ìN - VALIDACI√ìN Y AUTENTICACI√ìN
  // Valida credenciales y establece sesi√≥n activa
  const login = (email, password) => {
    try {
      console.log('üîê Intentando iniciar sesi√≥n:', email);
      
      // üìñ LEER DATOS: Obtener usuarios registrados del localStorage
      const existingUsers = JSON.parse(localStorage.getItem('discoStuUsers')) || [];
      console.log('üîç Buscando usuario en', existingUsers.length, 'registros');
      
      // üîç BUSCAR Y VALIDAR: Encontrar usuario con credenciales correctas
      // En producci√≥n, el password debe compararse usando hash (bcrypt, etc.)
      const user = existingUsers.find(u => u.email === email && u.password === password);
      
      if (!user) {
        console.log('‚ùå Credenciales incorrectas');
        throw new Error('Email o contrase√±a incorrectos');
      }

      console.log('‚úÖ Usuario encontrado:', user.name);

      // üé´ CREAR SESI√ìN: Objeto limpio sin informaci√≥n sensible
      const userSession = {
        id: user.id,
        name: user.name,
        email: user.email,
        createdAt: user.createdAt
        // ‚ùó password NO se incluye en la sesi√≥n por seguridad
      };

      // üíæ PERSISTIR: Guardar sesi√≥n en localStorage para mantenerla entre recargas
      localStorage.setItem('currentUser', JSON.stringify(userSession));
      
      // üîÑ ACTUALIZAR ESTADO: Cambiar estado global, esto re-renderiza autom√°ticamente
      // todos los componentes que consumen el AuthContext
      setUser(userSession);
      
      console.log('üéâ Sesi√≥n iniciada exitosamente');
      return { success: true, user: userSession };
    } catch (error) {
      console.error('‚ùå Error en login:', error.message);
      return { success: false, error: error.message };
    }
  };

  // üö™ FUNCI√ìN DE CIERRE DE SESI√ìN - LIMPIEZA DE ESTADO
  // Elimina la sesi√≥n persistente y resetea el estado global
  const logout = () => {
    console.log('üö™ Cerrando sesi√≥n...');
    
    // üóëÔ∏è LIMPIAR: Eliminar sesi√≥n del almacenamiento persistente
    localStorage.removeItem('currentUser');
    
    // üîÑ RESETEAR ESTADO: Cambiar estado a null causa re-render autom√°tico
    // Todos los componentes que dependen del usuario se actualizar√°n
    setUser(null);
    
    console.log('‚úÖ Sesi√≥n cerrada exitosamente');
  };

  // ‚úÖ FUNCI√ìN DE VALIDACI√ìN - COMPUTED VALUE
  // Funci√≥n pura que retorna true/false basado en el estado actual
  // Se recalcula autom√°ticamente cada vez que 'user' cambia
  const isAuthenticated = () => {
    const authenticated = user !== null;
    console.log('üîç Estado de autenticaci√≥n:', authenticated);
    return authenticated;
  };

  // üì¶ OBJETO DE CONTEXTO - VALORES COMPARTIDOS GLOBALMENTE
  // Estos valores estar√°n disponibles en cualquier componente hijo
  // que use el hook useAuth() o useContext(AuthContext)
  const value = {
    // Estado de datos
    user,           // Informaci√≥n del usuario actual (null si no autenticado)
    loading,        // Boolean para mostrar loading mientras se inicializa
    
    // Funciones de autenticaci√≥n
    register,       // Funci√≥n para registrar nuevos usuarios
    login,          // Funci√≥n para iniciar sesi√≥n
    logout,         // Funci√≥n para cerrar sesi√≥n
    isAuthenticated // Funci√≥n para verificar si hay sesi√≥n activa
  };

  return (
    // üåê PROVEEDOR DE CONTEXTO - WRAPPER GLOBAL
    // Todos los componentes hijo tendr√°n acceso a 'value'
    // !loading asegura que no se rendericen los hijos hasta que se verifique la sesi√≥n
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};
